{"version":3,"sources":["encode.js","keyInput.js","decode.js","options.js","index.js"],"names":["Encode","Grid","container","id","className","direction","justify","alignItems","TextField","label","multiline","rows","variant","onChange","this","props","value","textContent","Button","color","onClick","React","Component","KeyInput","ordered","FormControlLabel","control","Tooltip","title","placement","arrow","error","errorMessage","length","helperText","onKeyDown","e","keyCode","preventDefault","onBlur","orderedBlur","size","labelPlacement","keyBlur","Checkbox","onCheck","KeyBox","Decode","Options","onClickSpaces","onClickSymbols","onClickCaps","Decoder","state","intKey","orderKey","encodeContent","decodeContent","isOrdered","keyErrorLabel","excludeSpaces","excludeSymbols","doCaps","onDecodeChange","bind","onEncodeChange","onKeyBlur","onOrderedBlur","encodeInput","decodeInput","applyOptions","arrayKey","Array","isArray","i","j","message","seconds","setState","setTimeout","text","replace","toUpperCase","key","isValidOrder","doKeyError","isOrderedKey","railNum","checkKeyInput","textRails","railPos","movingDown","concat","charAt","console","log","map","element","join","keyLength","railLengths","fill","cutText","slice","holdRails","push","indexOf","finalString","event","encodedText","encodeCipher","decodedText","decodeCipher","target","parseInt","inputText","scannedInts","match","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c043b7a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\n\r\n//import ReactDOM from 'react-dom';\r\n\r\nclass Encode extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    id=\"encodeGrid\"\r\n                    className=\"cipherGrid\"\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\" >\r\n\r\n                    <TextField\r\n                        id=\"decodedText\"\r\n                        className=\"inputField\"\r\n                        label=\"Decoded Text:\"\r\n                        multiline\r\n                        rows={6}\r\n                        variant=\"outlined\"\r\n                        onChange={this.props.onChange}\r\n                        value={this.props.textContent}\r\n                    />\r\n                    \r\n                    <Button\r\n                        color=\"secondary\"\r\n                        id=\"encodeButton\"\r\n                        className=\"cipherButton\"\r\n                        variant=\"contained\"\r\n                        onClick={this.props.onClick}>Encode</Button>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Encode","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n//import { FaKey } from \"react-icons/fa\";\r\nimport { Checkbox, FormControlLabel, TextField, /*IconButton,*/ Tooltip, /*Grid*/ } from '@material-ui/core';\r\n//import HelpIcon from '@material-ui/icons/Help';\r\nimport './index.css';\r\n\r\nclass KeyInput extends React.Component {\r\n\r\n    KeyBox(props) {\r\n        if (props.ordered) {\r\n            return (\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Tooltip\r\n                                title=\"Ordered keys consist of a series of unique integers, starting at 0 and all below the length of the series (ex: 3 0 4 1 2)\"\r\n                                placement=\"right\"\r\n                                arrow>\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    error={props.errorMessage.length !== 0}\r\n                                    helperText={props.errorMessage}\r\n                                    id=\"orderedKeyInput\"\r\n                                    onKeyDown={(e) => {\r\n                                        if ((e.keyCode < 48 || e.keyCode > 57) && !(e.keyCode === 8 || e.keyCode === 32 || e.keyCode === 188)) {\r\n                                            e.preventDefault();\r\n                                        }\r\n                                    }}\r\n                                    onBlur={props.orderedBlur}\r\n                                    size=\"small\"\r\n                                />\r\n                            </Tooltip>\r\n                        }\r\n                        label=\"Ordered Key:  \"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Tooltip\r\n                                title=\"A standard rail-fence cipher key consists of a single integer, >0 and ideally on the smaller side (depending on text length).\"\r\n                                placement=\"right\"\r\n                                arrow>\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    error={props.errorMessage.length !== 0}\r\n                                    helperText={props.errorMessage}\r\n                                    id=\"basicKeyInput\"\r\n                                    onKeyDown={(e) => {\r\n                                        if ((e.keyCode < 48 || e.keyCode > 57) && e.keyCode !== 8) {\r\n                                            e.preventDefault();\r\n                                        }\r\n                                    }}\r\n                                    onBlur={props.keyBlur}\r\n                                    size=\"small\"\r\n                                />\r\n                            </Tooltip>\r\n                        }\r\n                        label=\"Key: \"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            id=\"order=toggle=checkbox\"\r\n                            color=\"primary\"\r\n                            onClick={this.props.onCheck}\r\n                        />\r\n                    }\r\n                    label=\"Use Ordered Key:\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <this.KeyBox\r\n                    ordered={this.props.ordered}\r\n                    keyBlur={this.props.keyBlur}\r\n                    orderedBlur={this.props.orderedBlur}\r\n                    errorMessage={this.props.errorMessage}></this.KeyBox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KeyInput","import React from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\nimport './index.css';\r\n//import ReactDOM from 'react-dom';\r\n\r\nclass Decode extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    id=\"decodeGrid\"\r\n                    className=\"cipherGrid\"\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\" >\r\n\r\n                    <TextField\r\n                        id=\"encodedText\"\r\n                        className=\"inputField\"\r\n                        label=\"Encoded Text:\"\r\n                        multiline\r\n                        rows={6}\r\n                        variant=\"outlined\"\r\n                        onChange={this.props.onChange}\r\n                        value={this.props.textContent}\r\n                    />\r\n\r\n                    <Button\r\n                        color=\"primary\"\r\n                        id=\"decodeButton\"\r\n                        className=\"cipherButton\"\r\n                        variant=\"contained\"\r\n                        onClick={this.props.onClick}>Decode\r\n                    </Button>\r\n\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Decode","import React from 'react';\r\nimport { Checkbox, FormControlLabel, Grid } from '@material-ui/core';\r\n\r\nclass Options extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    \r\n                >\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                color=\"primary\"\r\n                                onClick={this.props.onClickSpaces}\r\n                            ></Checkbox>\r\n                        }\r\n                        label=\"Exclude Spaces\"\r\n                        labelPlacement=\"end\"\r\n                    >\r\n                    </FormControlLabel>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                color=\"primary\"\r\n                                onClick={this.props.onClickSymbols}\r\n                            ></Checkbox>\r\n                        }\r\n                        label=\"Exclude Symbols\"\r\n                        labelPlacement=\"end\"\r\n                    >\r\n                    </FormControlLabel>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                color=\"primary\"\r\n                                onClick={this.props.onClickCaps}\r\n                            ></Checkbox>\r\n                        }\r\n                        label=\"Uppercase Results\"\r\n                        labelPlacement=\"end\"\r\n                    >\r\n                    </FormControlLabel>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Options","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Encode from './encode.js';\r\nimport KeyInput from './keyInput.js';\r\nimport Decode from './decode.js';\r\nimport Options from './options.js';\r\nimport './index.css';\r\n\r\n\r\nimport { Grid } from '@material-ui/core'\r\n\r\nclass Decoder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            intKey: 0,\r\n            orderKey: [],\r\n            encodeContent: '',\r\n            decodeContent: '',\r\n            isOrdered: false,\r\n            keyErrorLabel: \"\",\r\n            excludeSpaces: false,\r\n            excludeSymbols: false,\r\n            doCaps: false,\r\n        }\r\n\r\n        this.onDecodeChange = this.onDecodeChange.bind(this);\r\n        this.onEncodeChange = this.onEncodeChange.bind(this);\r\n        this.onKeyBlur = this.onKeyBlur.bind(this);\r\n        this.onOrderedBlur = this.onOrderedBlur.bind(this);\r\n        this.encodeInput = this.encodeInput.bind(this);\r\n        this.decodeInput = this.decodeInput.bind(this);\r\n        this.applyOptions = this.applyOptions.bind(this);\r\n    }\r\n\r\n    isValidOrder(arrayKey) {\r\n        if (!Array.isArray(arrayKey)) return false;\r\n        for (var i = 0; i < arrayKey.length; i++) {\r\n            if (arrayKey[i] > arrayKey.length) return false;\r\n            for (var j = 0; j < i; j++) {\r\n                if (arrayKey[j] === arrayKey[i]) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    doKeyError(message, seconds) {\r\n        this.setState({ keyErrorLabel: message });\r\n        setTimeout(() => { this.setState({ keyErrorLabel: \"\" }) }, seconds * 1000);\r\n    }\r\n\r\n    applyOptions(text) {\r\n        if (text && this.state.excludeSpaces) {\r\n            text = text.replace(/\\s/g, '');\r\n        }\r\n\r\n        if (text && this.state.excludeSymbols) {\r\n            text = text.replace(/[$-/:-?{-~!\"^_`[\\]]/g,'')\r\n        }\r\n\r\n        if (text && this.state.doCaps) {\r\n            text = text.toUpperCase();\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    checkKeyInput(length, key) {\r\n        if (length === 0 || !length) {\r\n            this.doKeyError(\"Invalid key\", 3)\r\n            return false;\r\n        }\r\n        else if (this.state.isOrdered !== this.isValidOrder(key)) {\r\n            this.doKeyError(\"Invalid key order\", 3)\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    encodeCipher(text, key) {\r\n        var isOrderedKey = this.isValidOrder(key);\r\n        var railNum = isOrderedKey ? key.length : key;\r\n        if (!this.checkKeyInput(railNum, key)) return;\r\n\r\n        var textRails = new Array(railNum);\r\n        for (var i = 0; i < textRails.length; i++) {\r\n            textRails[i] = \"\";\r\n        }\r\n        var railPos = 0;\r\n        var movingDown = false; //\"moving down\" increments the number\r\n\r\n        for (i = 0; i < text.length; i++) {\r\n            //adds the character to the rail\r\n            textRails[railPos] = textRails[railPos].concat(text.charAt(i));\r\n            if (railPos === railNum - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n\r\n\r\n        }\r\n        console.log(textRails);\r\n        var result;\r\n        if (!isOrderedKey) result = textRails.join(\"\");\r\n        else result = key.map(function (element) { return textRails[element] }).join(\"\");\r\n\r\n        return result;\r\n    }\r\n\r\n    decodeCipher(text, key) {\r\n        //some basic setup (key type, creates rail length array)\r\n        var isOrderedKey = this.isValidOrder(key);\r\n        var keyLength = isOrderedKey ? key.length : key;\r\n        if (!this.checkKeyInput(keyLength, key)) return;\r\n\r\n        //console.log(railLengths);\r\n        var railLengths = new Array(keyLength);\r\n        railLengths.fill(0);\r\n        //console.log(railLengths);\r\n\r\n        //simulates the rail-creation process to determine the length of each rail\r\n        var railPos = 0;\r\n        var movingDown = false;\r\n        for (var i = 0; i < text.length; i++) {\r\n            railLengths[railPos]++;\r\n\r\n            if (railPos === railLengths.length - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n            //console.log(railLengths);\r\n        }\r\n        console.log(railLengths);\r\n\r\n        // if the key is ordered, arrange the rail lengths into the correct order\r\n        if (isOrderedKey) {\r\n            railLengths = key.map(function (element) { return railLengths[element] });\r\n        }\r\n        console.log(railLengths);\r\n\r\n        //cuts the ciphertext into appropriate rails\r\n        var textRails = railLengths.map(function (element) {\r\n            var cutText = text.slice(0, element);\r\n            text = text.slice(element, text.length);\r\n            return cutText;\r\n        })\r\n        console.log(textRails);\r\n\r\n       if (isOrderedKey) { //gets the rails back in proper order ** TODO: DOESN'T WORK, FIX THIS**\r\n            var holdRails = [];\r\n            for (i = 0; i < textRails.length; i++) {\r\n                holdRails.push(textRails[key.indexOf(i)]);\r\n            }\r\n            textRails = holdRails;\r\n        }\r\n        console.log(textRails);\r\n\r\n        //creates the decoded string from the rail contents\r\n        var finalString = \"\";\r\n        railPos = 0;\r\n        movingDown = false;\r\n        while (textRails[railPos] !== \"\") {\r\n            //slices off the first chracter of the chosen text rail, adding it to the list\r\n            finalString = finalString.concat(textRails[railPos].charAt(0));\r\n            textRails[railPos] = textRails[railPos].slice(1, textRails[railPos].length);\r\n\r\n            if (railPos === textRails.length - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n\r\n        }\r\n\r\n        return finalString;\r\n    }\r\n\r\n    encodeInput(event) { //handles clicking of \"encode\"\r\n        console.log(\"Encoding text\");\r\n        var key = this.state.isOrdered ? this.state.orderKey : this.state.intKey;\r\n        var encodedText = this.encodeCipher(this.state.encodeContent, key);\r\n        console.log(encodedText);\r\n        this.setState({ decodeContent: this.applyOptions(encodedText) })\r\n        this.setState({ encodeContent: this.applyOptions(this.state.encodeContent)});\r\n\r\n    }\r\n\r\n    decodeInput(event) { //handles clicking of \"decode\"\r\n        console.log(\"Decoding text\");\r\n        var key = this.state.isOrdered ? this.state.orderKey : this.state.intKey;\r\n        var decodedText = this.decodeCipher(this.state.decodeContent, key);\r\n        this.setState({ encodeContent: this.applyOptions(decodedText) });\r\n        this.setState({ decodeContent: this.applyOptions(this.state.decodeContent)});\r\n    }\r\n\r\n\r\n\r\n    onEncodeChange(event) {\r\n        this.setState({ encodeContent: event.target.value });\r\n    }\r\n\r\n    onDecodeChange(event) {\r\n        this.setState({ decodeContent: event.target.value });\r\n    }\r\n\r\n    onKeyBlur(event) {\r\n        console.log(\"Key input read.\");\r\n        this.setState({ intKey: parseInt(event.target.value) });\r\n\r\n    }\r\n\r\n    onOrderedBlur(event) {\r\n        console.log(\"Ordered input read.\");\r\n        var inputText = event.target.value;\r\n        console.log(inputText);\r\n        var scannedInts = inputText.match(/\\d+/g); //i only vaguely understand how match() works\r\n        if (scannedInts) this.setState({ orderKey: scannedInts.map(Number) });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <KeyInput\r\n                    onCheck={() => this.setState({ isOrdered: !(this.state.isOrdered) })}\r\n                    ordered={this.state.isOrdered}\r\n                    keyBlur={this.onKeyBlur}\r\n                    orderedBlur={this.onOrderedBlur}\r\n                    errorMessage={this.state.keyErrorLabel}\r\n                    id=\"keyInput\"\r\n                    ></KeyInput>\r\n                <br/>\r\n                <Grid\r\n                container\r\n                direction=\"row\"\r\n                id=\"cipherRow\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\">\r\n                    <Encode\r\n                        onChange={this.onEncodeChange}\r\n                        onClick={this.encodeInput}\r\n                        textContent={this.state.encodeContent}\r\n                    ></Encode>\r\n                    <Decode\r\n                        onChange={this.onDecodeChange}\r\n                        onClick={this.decodeInput}\r\n                        textContent={this.state.decodeContent}\r\n                    ></Decode>\r\n                </Grid>\r\n                <br/>\r\n                <Options\r\n                onClickSpaces={() => this.setState({excludeSpaces: !(this.state.excludeSpaces)})}\r\n                onClickSymbols={() => this.setState({excludeSymbols: !(this.state.excludeSymbols)})}\r\n                onClickCaps={() => this.setState({doCaps: !(this.state.doCaps)})}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n    <Decoder />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}