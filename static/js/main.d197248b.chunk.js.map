{"version":3,"sources":["encode.js","keyInput.js","decode.js","index.js"],"names":["Encode","Grid","container","id","className","direction","justify","alignItems","TextField","label","multiline","rows","variant","onChange","this","props","value","textContent","Button","color","onClick","React","Component","KeyInput","ordered","FormControlLabel","control","error","errorMessage","length","helperText","onBlur","orderedBlur","size","labelPlacement","keyBlur","Checkbox","onCheck","Tooltip","title","placement","arrow","IconButton","aria-label","disableFocusRipple","disableRipple","fontSize","KeyBox","Decode","Decoder","state","intKey","orderKey","encodeContent","decodeContent","isOrdered","keyErrorLabel","onDecodeChange","bind","onEncodeChange","onKeyBlur","onOrderedBlur","encodeInput","decodeInput","arrayKey","Array","isArray","i","j","message","seconds","setState","setTimeout","key","isValidOrder","doKeyError","text","isOrderedKey","railNum","checkKeyInput","textRails","railPos","movingDown","concat","charAt","console","log","map","element","join","keyLength","railLengths","fill","cutText","slice","holdRails","push","indexOf","finalString","event","encodedText","encodeCipher","decodedText","decodeCipher","target","parseInt","inputText","scannedInts","match","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d197248b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\n\r\n//import ReactDOM from 'react-dom';\r\n\r\nclass Encode extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    id=\"encodeGrid\"\r\n                    className=\"cipherGrid\"\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\" >\r\n\r\n                    <TextField\r\n                        id=\"decodedText\"\r\n                        className=\"inputField\"\r\n                        label=\"Decoded Text:\"\r\n                        multiline\r\n                        rows={6}\r\n                        variant=\"outlined\"\r\n                        onChange={this.props.onChange}\r\n                        value={this.props.textContent}\r\n                    />\r\n                    \r\n                    <Button\r\n                        color=\"secondary\"\r\n                        id=\"encodeButton\"\r\n                        className=\"cipherButton\"\r\n                        variant=\"contained\"\r\n                        onClick={this.props.onClick}>Encode</Button>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Encode","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n//import { FaKey } from \"react-icons/fa\";\r\nimport { Checkbox, FormControlLabel, TextField, IconButton, Tooltip, /*Grid*/ } from '@material-ui/core';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport './index.css';\r\n\r\nclass KeyInput extends React.Component {\r\n\r\n    KeyBox(props) {\r\n        if (props.ordered) {\r\n            return (\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                variant=\"standard\"\r\n                                error={props.errorMessage.length !== 0}\r\n                                helperText={props.errorMessage}\r\n                                id=\"orderedKeyInput\"\r\n                                onBlur={props.orderedBlur}\r\n                                size=\"small\"\r\n                            />\r\n                        }\r\n                        label=\"Ordered Key:  \"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                    {/*<label><FaKey /> Ordered Key: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"orderedKeyInput\"\r\n                    onBlur={props.orderedBlur}></input>*/}\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                variant=\"standard\"\r\n                                error={props.errorMessage.length !== 0}\r\n                                helperText={props.errorMessage}\r\n                                id=\"basicKeyInput\"\r\n                                onBlur={props.keyBlur}\r\n                                size=\"small\"\r\n                            />\r\n                        }\r\n                        label=\"Key: \"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n\r\n                    {/*<label><FaKey /> Key: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"basicKeyInput\"\r\n                        onBlur={props.keyBlur}\r\n                    ></input>*/}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            id=\"order=toggle=checkbox\"\r\n                            color=\"primary\"\r\n                            onClick={this.props.onCheck}\r\n                        />\r\n                    }\r\n                    label=\"Use Ordered Key:\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <Tooltip \r\n                title=\"An ordered key is an arrangement of unique integers within a range, starting at zero. Ex: {3, 0, 1, 4, 2}\"\r\n                placement=\"right\"\r\n                arrow>\r\n                    <IconButton\r\n                        aria-label=\"help\"\r\n                        disableFocusRipple={true}\r\n                        disableRipple={true}\r\n                        size=\"medium\"\r\n                        >\r\n                        <HelpIcon\r\n                            fontSize=\"small\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <this.KeyBox\r\n                    ordered={this.props.ordered}\r\n                    keyBlur={this.props.keyBlur}\r\n                    orderedBlur={this.props.orderedBlur}\r\n                    errorMessage={this.props.errorMessage}></this.KeyBox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KeyInput","import React from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\nimport './index.css';\r\n//import ReactDOM from 'react-dom';\r\n\r\nclass Decode extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    id=\"decodeGrid\"\r\n                    className=\"cipherGrid\"\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\" >\r\n\r\n                    <TextField\r\n                        id=\"encodedText\"\r\n                        className=\"inputField\"\r\n                        label=\"Encoded Text:\"\r\n                        multiline\r\n                        rows={6}\r\n                        variant=\"outlined\"\r\n                        onChange={this.props.onChange}\r\n                        value={this.props.textContent}\r\n                    />\r\n\r\n                    <Button\r\n                        color=\"primary\"\r\n                        id=\"decodeButton\"\r\n                        className=\"cipherButton\"\r\n                        variant=\"contained\"\r\n                        onClick={this.props.onClick}>Decode\r\n                    </Button>\r\n\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Decode","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Encode from './encode.js';\r\nimport KeyInput from './keyInput.js';\r\nimport Decode from './decode.js';\r\nimport './index.css';\r\n\r\n/*import AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';*/\r\nimport { Grid } from '@material-ui/core'\r\n\r\nclass Decoder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            intKey: 0,\r\n            orderKey: [],\r\n            encodeContent: '',\r\n            decodeContent: '',\r\n            isOrdered: false,\r\n            keyErrorLabel: \"\",\r\n        }\r\n\r\n        this.onDecodeChange = this.onDecodeChange.bind(this);\r\n        this.onEncodeChange = this.onEncodeChange.bind(this);\r\n        this.onKeyBlur = this.onKeyBlur.bind(this);\r\n        this.onOrderedBlur = this.onOrderedBlur.bind(this);\r\n        this.encodeInput = this.encodeInput.bind(this);\r\n        this.decodeInput = this.decodeInput.bind(this);\r\n    }\r\n\r\n    isValidOrder(arrayKey) {\r\n        if (!Array.isArray(arrayKey)) return false;\r\n        for (var i = 0; i < arrayKey.length; i++) {\r\n            if (arrayKey[i] > arrayKey.length) return false;\r\n            for (var j = 0; j < i; j++) {\r\n                if (arrayKey[j] === arrayKey[i]) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    doKeyError(message, seconds) {\r\n        this.setState({ keyErrorLabel: message });\r\n        setTimeout(() => { this.setState({ keyErrorLabel: \"\" }) }, seconds * 1000);\r\n    }\r\n\r\n    checkKeyInput(length, key) {\r\n        if (length === 0 || !length) {\r\n            this.doKeyError(\"Invalid key\", 3)\r\n            return false;\r\n        }\r\n        else if (this.state.isOrdered !== this.isValidOrder(key)) {\r\n            this.doKeyError(\"Invalid key order\", 3)\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    encodeCipher(text, key) {\r\n        var isOrderedKey = this.isValidOrder(key);\r\n        var railNum = isOrderedKey ? key.length : key;\r\n        if (!this.checkKeyInput(railNum, key)) return;\r\n\r\n        var textRails = new Array(railNum);\r\n        for (var i = 0; i < textRails.length; i++) {\r\n            textRails[i] = \"\";\r\n        }\r\n        var railPos = 0;\r\n        var movingDown = false; //\"moving down\" increments the number\r\n\r\n        for (i = 0; i < text.length; i++) {\r\n            //adds the character to the rail\r\n            textRails[railPos] = textRails[railPos].concat(text.charAt(i));\r\n            if (railPos === railNum - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n\r\n\r\n        }\r\n        console.log(textRails);\r\n        if (!isOrderedKey) return textRails.join(\"\");\r\n        else return key.map(function (element) { return textRails[element] }).join(\"\");\r\n    }\r\n\r\n    decodeCipher(text, key) {\r\n        //some basic setup (key type, creates rail length array)\r\n        var isOrderedKey = this.isValidOrder(key);\r\n        var keyLength = isOrderedKey ? key.length : key;\r\n        if (!this.checkKeyInput(keyLength, key)) return;\r\n\r\n        //console.log(railLengths);\r\n        var railLengths = new Array(keyLength);\r\n        railLengths.fill(0);\r\n        //console.log(railLengths);\r\n\r\n        //simulates the rail-creation process to determine the length of each rail\r\n        var railPos = 0;\r\n        var movingDown = false;\r\n        for (var i = 0; i < text.length; i++) {\r\n            railLengths[railPos]++;\r\n\r\n            if (railPos === railLengths.length - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n            //console.log(railLengths);\r\n        }\r\n        console.log(railLengths);\r\n\r\n        // if the key is ordered, arrange the rail lengths into the correct order\r\n        if (isOrderedKey) {\r\n            railLengths = key.map(function (element) { return railLengths[element] });\r\n        }\r\n        console.log(railLengths);\r\n\r\n        //cuts the ciphertext into appropriate rails\r\n        var textRails = railLengths.map(function (element) {\r\n            var cutText = text.slice(0, element);\r\n            text = text.slice(element, text.length);\r\n            return cutText;\r\n        })\r\n        console.log(textRails);\r\n\r\n       if (isOrderedKey) { //gets the rails back in proper order ** TODO: DOESN'T WORK, FIX THIS**\r\n            var holdRails = [];\r\n            for (i = 0; i < textRails.length; i++) {\r\n                holdRails.push(textRails[key.indexOf(i)]);\r\n            }\r\n            textRails = holdRails;\r\n        }\r\n        console.log(textRails);\r\n\r\n        //creates the decoded string from the rail contents\r\n        var finalString = \"\";\r\n        railPos = 0;\r\n        movingDown = false;\r\n        while (textRails[railPos] !== \"\") {\r\n            //slices off the first chracter of the chosen text rail, adding it to the list\r\n            finalString = finalString.concat(textRails[railPos].charAt(0));\r\n            textRails[railPos] = textRails[railPos].slice(1, textRails[railPos].length);\r\n\r\n            if (railPos === textRails.length - 1) {\r\n                movingDown = false;\r\n            }\r\n            else if (railPos === 0) {\r\n                movingDown = true;\r\n            }\r\n\r\n            if (movingDown) railPos++;\r\n            else railPos--;\r\n\r\n        }\r\n\r\n        return finalString;\r\n    }\r\n\r\n    encodeInput(event) { //handles clicking of \"encode\"\r\n        console.log(\"Encoding text\");\r\n        var key = this.state.isOrdered ? this.state.orderKey : this.state.intKey;\r\n        var encodedText = this.encodeCipher(this.state.encodeContent, key);\r\n        console.log(encodedText);\r\n        this.setState({ decodeContent: encodedText });\r\n\r\n    }\r\n\r\n    decodeInput(event) { //handles clicking of \"decode\"\r\n        console.log(\"Decoding text\");\r\n        var key = this.state.isOrdered ? this.state.orderKey : this.state.intKey;\r\n        var decodedText = this.decodeCipher(this.state.decodeContent, key);\r\n        this.setState({ encodeContent: decodedText });\r\n    }\r\n\r\n\r\n\r\n    onEncodeChange(event) {\r\n        this.setState({ encodeContent: event.target.value });\r\n    }\r\n\r\n    onDecodeChange(event) {\r\n        this.setState({ decodeContent: event.target.value });\r\n    }\r\n\r\n    onKeyBlur(event) {\r\n        console.log(\"Key input read.\");\r\n        this.setState({ intKey: parseInt(event.target.value) });\r\n\r\n    }\r\n\r\n    onOrderedBlur(event) {\r\n        console.log(\"Ordered input read.\");\r\n        var inputText = event.target.value;\r\n        console.log(inputText);\r\n        var scannedInts = inputText.match(/\\d+/g); //i only vaguely understand how match() works\r\n        if (scannedInts) this.setState({ orderKey: scannedInts.map(Number) });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <KeyInput\r\n                    onCheck={() => this.setState({ isOrdered: !(this.state.isOrdered) })}\r\n                    ordered={this.state.isOrdered}\r\n                    keyBlur={this.onKeyBlur}\r\n                    orderedBlur={this.onOrderedBlur}\r\n                    errorMessage={this.state.keyErrorLabel}\r\n                    id=\"keyInput\"\r\n                    ></KeyInput>\r\n                <br/>\r\n                <Grid\r\n                container\r\n                direction=\"row\"\r\n                id=\"cipherRow\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\">\r\n                    <Encode\r\n                        onChange={this.onEncodeChange}\r\n                        onClick={this.encodeInput}\r\n                        textContent={this.state.encodeContent}\r\n                    ></Encode>\r\n                    <Decode\r\n                        onChange={this.onDecodeChange}\r\n                        onClick={this.decodeInput}\r\n                        textContent={this.state.decodeContent}\r\n                    ></Decode>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n    <Decoder />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}